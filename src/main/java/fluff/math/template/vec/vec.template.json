{
	"include": [
		"INumberVec.java",
		"AbstractNumberVec2.java",
		"AbstractNumberVec3.java",
		"AbstractNumberVec4.java",
		"Vec2n.java",
		"Vec3n.java",
		"Vec4n.java"
	],
	"generate": [
		{
			"from": "number",
			"to": [
				"int",
				"long",
				"float",
				"double"
			]
		}
	],
	"define": [
		{
			"from": "public",
			"to": "public"
		}
	],
	"define_if": [
		[
			"long_name",
			"short_name",
			"convert_x",
			"convert_y",
			"convert_z",
			"convert_w"
		],
		{
			"if": "/*number*/",
			"equals": "int",
			"then": [
				"Int",
				"i",
				"+ getX()",
				"+ getY()",
				"+ getZ()",
				"+ getW()"
			]
		},
		{
			"if": "/*number*/",
			"equals": "long",
			"then": [
				"Long",
				"l",
				"+ getX()",
				"+ getY()",
				"+ getZ()",
				"+ getW()"
			]
		},
		{
			"if": "/*number*/",
			"equals": "float",
			"then": [
				"Float",
				"f",
				"+ Float.floatToIntBits(getX())",
				"+ Float.floatToIntBits(getY())",
				"+ Float.floatToIntBits(getZ())",
				"+ Float.floatToIntBits(getW())"
			]
		},
		{
			"if": "/*number*/",
			"equals": "double",
			"then": [
				"Double",
				"d",
				"+ Double.doubleToLongBits(getX())",
				"+ Double.doubleToLongBits(getY())",
				"+ Double.doubleToLongBits(getZ())",
				"+ Double.doubleToLongBits(getW())"
			]
		}
	],
	"replace": [
		{
			"from": "fluff.math.template",
			"to": "fluff.math.gen._/*number*/"
		},
		{
			"from": "INumberVec",
			"to": "I/*long_name*/Vec"
		},
		{
			"from": "AbstractNumberVec2",
			"to": "Abstract/*long_name*/Vec2"
		},
		{
			"from": "AbstractNumberVec3",
			"to": "Abstract/*long_name*/Vec3"
		},
		{
			"from": "AbstractNumberVec4",
			"to": "Abstract/*long_name*/Vec4"
		},
		{
			"from": "Vec2n",
			"to": "Vec2/*short_name*/"
		},
		{
			"from": "Vec3n",
			"to": "Vec3/*short_name*/"
		},
		{
			"from": "Vec4n",
			"to": "Vec4/*short_name*/"
		}
	],
	"destination": "gen/_/*number*//vec"
}